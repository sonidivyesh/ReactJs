/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SuppliersImport } from './routes/suppliers'
import { Route as StoresImport } from './routes/stores'
import { Route as ReportsImport } from './routes/reports'
import { Route as OrdersImport } from './routes/orders'
import { Route as InventoryImport } from './routes/inventory'
import { Route as IndexImport } from './routes/index'
import { Route as SuppliersIndexImport } from './routes/suppliers.index'
import { Route as ReportsIndexImport } from './routes/reports.index'
import { Route as OrdersIndexImport } from './routes/orders.index'
import { Route as InventoryIndexImport } from './routes/inventory.index'
import { Route as InventoryInventoryIdImport } from './routes/inventory.$inventoryId'

// Create/Update Routes

const SuppliersRoute = SuppliersImport.update({
  path: '/suppliers',
  getParentRoute: () => rootRoute,
} as any)

const StoresRoute = StoresImport.update({
  path: '/stores',
  getParentRoute: () => rootRoute,
} as any)

const ReportsRoute = ReportsImport.update({
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRoute = OrdersImport.update({
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const InventoryRoute = InventoryImport.update({
  path: '/inventory',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SuppliersIndexRoute = SuppliersIndexImport.update({
  path: '/',
  getParentRoute: () => SuppliersRoute,
} as any)

const ReportsIndexRoute = ReportsIndexImport.update({
  path: '/',
  getParentRoute: () => ReportsRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  path: '/',
  getParentRoute: () => OrdersRoute,
} as any)

const InventoryIndexRoute = InventoryIndexImport.update({
  path: '/',
  getParentRoute: () => InventoryRoute,
} as any)

const InventoryInventoryIdRoute = InventoryInventoryIdImport.update({
  path: '/$inventoryId',
  getParentRoute: () => InventoryRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsImport
      parentRoute: typeof rootRoute
    }
    '/stores': {
      id: '/stores'
      path: '/stores'
      fullPath: '/stores'
      preLoaderRoute: typeof StoresImport
      parentRoute: typeof rootRoute
    }
    '/suppliers': {
      id: '/suppliers'
      path: '/suppliers'
      fullPath: '/suppliers'
      preLoaderRoute: typeof SuppliersImport
      parentRoute: typeof rootRoute
    }
    '/inventory/$inventoryId': {
      id: '/inventory/$inventoryId'
      path: '/$inventoryId'
      fullPath: '/inventory/$inventoryId'
      preLoaderRoute: typeof InventoryInventoryIdImport
      parentRoute: typeof InventoryImport
    }
    '/inventory/': {
      id: '/inventory/'
      path: '/'
      fullPath: '/inventory/'
      preLoaderRoute: typeof InventoryIndexImport
      parentRoute: typeof InventoryImport
    }
    '/orders/': {
      id: '/orders/'
      path: '/'
      fullPath: '/orders/'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof OrdersImport
    }
    '/reports/': {
      id: '/reports/'
      path: '/'
      fullPath: '/reports/'
      preLoaderRoute: typeof ReportsIndexImport
      parentRoute: typeof ReportsImport
    }
    '/suppliers/': {
      id: '/suppliers/'
      path: '/'
      fullPath: '/suppliers/'
      preLoaderRoute: typeof SuppliersIndexImport
      parentRoute: typeof SuppliersImport
    }
  }
}

// Create and export the route tree

interface InventoryRouteChildren {
  InventoryInventoryIdRoute: typeof InventoryInventoryIdRoute
  InventoryIndexRoute: typeof InventoryIndexRoute
}

const InventoryRouteChildren: InventoryRouteChildren = {
  InventoryInventoryIdRoute: InventoryInventoryIdRoute,
  InventoryIndexRoute: InventoryIndexRoute,
}

const InventoryRouteWithChildren = InventoryRoute._addFileChildren(
  InventoryRouteChildren,
)

interface OrdersRouteChildren {
  OrdersIndexRoute: typeof OrdersIndexRoute
}

const OrdersRouteChildren: OrdersRouteChildren = {
  OrdersIndexRoute: OrdersIndexRoute,
}

const OrdersRouteWithChildren =
  OrdersRoute._addFileChildren(OrdersRouteChildren)

interface ReportsRouteChildren {
  ReportsIndexRoute: typeof ReportsIndexRoute
}

const ReportsRouteChildren: ReportsRouteChildren = {
  ReportsIndexRoute: ReportsIndexRoute,
}

const ReportsRouteWithChildren =
  ReportsRoute._addFileChildren(ReportsRouteChildren)

interface SuppliersRouteChildren {
  SuppliersIndexRoute: typeof SuppliersIndexRoute
}

const SuppliersRouteChildren: SuppliersRouteChildren = {
  SuppliersIndexRoute: SuppliersIndexRoute,
}

const SuppliersRouteWithChildren = SuppliersRoute._addFileChildren(
  SuppliersRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRouteWithChildren
  '/orders': typeof OrdersRouteWithChildren
  '/reports': typeof ReportsRouteWithChildren
  '/stores': typeof StoresRoute
  '/suppliers': typeof SuppliersRouteWithChildren
  '/inventory/$inventoryId': typeof InventoryInventoryIdRoute
  '/inventory/': typeof InventoryIndexRoute
  '/orders/': typeof OrdersIndexRoute
  '/reports/': typeof ReportsIndexRoute
  '/suppliers/': typeof SuppliersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/stores': typeof StoresRoute
  '/inventory/$inventoryId': typeof InventoryInventoryIdRoute
  '/inventory': typeof InventoryIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/reports': typeof ReportsIndexRoute
  '/suppliers': typeof SuppliersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/inventory': typeof InventoryRouteWithChildren
  '/orders': typeof OrdersRouteWithChildren
  '/reports': typeof ReportsRouteWithChildren
  '/stores': typeof StoresRoute
  '/suppliers': typeof SuppliersRouteWithChildren
  '/inventory/$inventoryId': typeof InventoryInventoryIdRoute
  '/inventory/': typeof InventoryIndexRoute
  '/orders/': typeof OrdersIndexRoute
  '/reports/': typeof ReportsIndexRoute
  '/suppliers/': typeof SuppliersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/inventory'
    | '/orders'
    | '/reports'
    | '/stores'
    | '/suppliers'
    | '/inventory/$inventoryId'
    | '/inventory/'
    | '/orders/'
    | '/reports/'
    | '/suppliers/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/stores'
    | '/inventory/$inventoryId'
    | '/inventory'
    | '/orders'
    | '/reports'
    | '/suppliers'
  id:
    | '__root__'
    | '/'
    | '/inventory'
    | '/orders'
    | '/reports'
    | '/stores'
    | '/suppliers'
    | '/inventory/$inventoryId'
    | '/inventory/'
    | '/orders/'
    | '/reports/'
    | '/suppliers/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InventoryRoute: typeof InventoryRouteWithChildren
  OrdersRoute: typeof OrdersRouteWithChildren
  ReportsRoute: typeof ReportsRouteWithChildren
  StoresRoute: typeof StoresRoute
  SuppliersRoute: typeof SuppliersRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InventoryRoute: InventoryRouteWithChildren,
  OrdersRoute: OrdersRouteWithChildren,
  ReportsRoute: ReportsRouteWithChildren,
  StoresRoute: StoresRoute,
  SuppliersRoute: SuppliersRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/inventory",
        "/orders",
        "/reports",
        "/stores",
        "/suppliers"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/inventory": {
      "filePath": "inventory.tsx",
      "children": [
        "/inventory/$inventoryId",
        "/inventory/"
      ]
    },
    "/orders": {
      "filePath": "orders.tsx",
      "children": [
        "/orders/"
      ]
    },
    "/reports": {
      "filePath": "reports.tsx",
      "children": [
        "/reports/"
      ]
    },
    "/stores": {
      "filePath": "stores.tsx"
    },
    "/suppliers": {
      "filePath": "suppliers.tsx",
      "children": [
        "/suppliers/"
      ]
    },
    "/inventory/$inventoryId": {
      "filePath": "inventory.$inventoryId.tsx",
      "parent": "/inventory"
    },
    "/inventory/": {
      "filePath": "inventory.index.tsx",
      "parent": "/inventory"
    },
    "/orders/": {
      "filePath": "orders.index.tsx",
      "parent": "/orders"
    },
    "/reports/": {
      "filePath": "reports.index.tsx",
      "parent": "/reports"
    },
    "/suppliers/": {
      "filePath": "suppliers.index.tsx",
      "parent": "/suppliers"
    }
  }
}
ROUTE_MANIFEST_END */
