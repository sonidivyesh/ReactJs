// 9. Query Invalidation
	***** Usecase : To autommatically fetch data post request data like addPost
	
	
	=> First we have to imoort hook {useQueryClient}
	
	=> Invoke this useQueryClient inside component function & this will gives us queryClient instance.
	
	=> So here we want, when the post request is done, we want to tell react-query to completely invalidate everything that exist in cache. So by doing it react-query will instantaneously fetch the updated list or data from database.
	
	=> So to do this we will use onSuccess method inside useMutation hook. In this we will use queryClient & this queryClient will give us InvalidateQueries function in which first parameter will be the queryKey ["posts"] which we want to invalidate.
	
	=> This has one drawback that when new post request is called then it invalidate everything & two new network requests will be made
		1. POST => this will return only last posted or added or updated response object 
		2. GET => this will fetch all data again 
		=> So drawback is eventhough only one response object is added or posted, still we are fetching entire data again.
	
	
	
	### example
	import React, { useState } from 'react'
	import { useQuery, useMutation } from '@tanstack/react-query'
	import axios from 'axios'
	import { Link } from 'react-router-dom'
	import { useQueryClient } from '@tanstack/react-query'

	//GET method
	const fetchPosts = () => {
		return axios.get("http://localhost:4000/posts");
	}

	// POST method
	const addPost = (post) => {
		return axios.post("http://localhost:4000/posts", post);
	}


	export default function PostsRQ () {

		const [title, setTitle] = useState("");
		const [body, setBody] = useState("");
		
		const queryClient = useQueryClient()

		const { data, isLoading, isError, error, isFetching } = useQuery({
			queryKey: ["posts"],
			queryFn: fetchPosts
		})

		const { mutate } = useMutation({
			mutationFn: addPost,
			onSuccess: () => {
				queryClient.invalidateQueries(["posts"]);
			}
		});


		const handleSubmit = (e) => {
			e.preventDefault();

			const post = { title, body }

			mutate(post);
			setTitle("");
			setBody("");
		}

		if (isLoading) {
			return <div>Page is loading...</div>
		}

		if (isError) {
			return <div>{error.message}</div>
		}


		return (
			<div>
				<form onSubmit={handleSubmit}>
					<input
						onChange={(e) => setTitle(e.target.value)}
						placeholder='Enter post title'
						value={title}
					/>
					<input
						onChange={(e) => setBody(e.target.value)}
						placeholder='Enter post body'
						value={body}
					/>
					<button type='submit'>Post</button>
				</form>
				{data?.data.map(post => (
					<Link key={post.id} to={`/posts/${post.id}`}>
						<div key={post.id}>
							<h3>{post.title}</h3>
							<p>{post.body}</p>
						</div>
					</Link>
				))}
			</div>
		);
	}