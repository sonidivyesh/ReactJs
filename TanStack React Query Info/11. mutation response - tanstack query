// 10. Mutation response
	***** Usecase : To autommatically fetch data post request data like addPost in more optimized way than Query invalidation
	
	
	=> As we know that in Query Invalidation we have to fetch entire data again eventhough only one response object is added or posted or updated.
	=> So to prevent this react-query let's us this newly added or posted or updated response object & adds it to the internal queryKey->["posts"] cache list & show us instanteneously in the browser. So we do not have to make additional API call.
	
	=> Similarly like as Query invalidation we will use onSuccess method inside useMutation hook. This will receive newly update data as a parameter as 'newData'.
	=> Now we have to add this data into queryKey ["posts"] cache. 
	=> To add this data into queryKey ["Posts"] cache we will use setQueryData function in this first parameter will be the queryKey ["posts"] which we want to add.
	=> And second parameter will be a function which will have oldQueryData, so we will copy old data using spread operator ...oldQueryData & add new data after old data.
	
	
	=> So now only one network requests will be made
		1. POST => this will return only last posted or added or updated response object 
	=> So now newly added data's response object will be added to ["posts"] queryKey list & will show in brwoser using preflight call.
	=> Like this way we can save additional GET network request call.
	
	
	
	### example
	import React, { useState } from 'react'
	import { useQuery, useMutation } from '@tanstack/react-query'
	import axios from 'axios'
	import { Link } from 'react-router-dom'
	import { useQueryClient } from '@tanstack/react-query'

	//GET method
	const fetchPosts = () => {
		return axios.get("http://localhost:4000/posts");
	}

	// POST method
	const addPost = (post) => {
		return axios.post("http://localhost:4000/posts", post);
	}


	export default function PostsRQ () {

		const [title, setTitle] = useState("");
		const [body, setBody] = useState("");
		
		const queryClient = useQueryClient()

		const { data, isLoading, isError, error, isFetching } = useQuery({
			queryKey: ["posts"],
			queryFn: fetchPosts
		})

		const { mutate } = useMutation({
			mutationFn: addPost,
			onSuccess: (newData) => {
				queryClient.setQueryData(["posts"], (oldQueryData) => {
					return {
						...oldQueryData,
						data: [...oldQueryData.data, newData.data]
					}
				})
			}	
		});

		const handleSubmit = (e) => {
			e.preventDefault();

			const post = { title, body }

			mutate(post);
			setTitle("");
			setBody("");
		}

		if (isLoading) {
			return <div>Page is loading...</div>
		}

		if (isError) {
			return <div>{error.message}</div>
		}


		return (
			<div>
				<form onSubmit={handleSubmit}>
					<input
						onChange={(e) => setTitle(e.target.value)}
						placeholder='Enter post title'
						value={title}
					/>
					<input
						onChange={(e) => setBody(e.target.value)}
						placeholder='Enter post body'
						value={body}
					/>
					<button type='submit'>Post</button>
				</form>
				{data?.data.map(post => (
					<Link key={post.id} to={`/posts/${post.id}`}>
						<div key={post.id}>
							<h3>{post.title}</h3>
							<p>{post.body}</p>
						</div>
					</Link>
				))}
			</div>
		);
	}
	